#+TITLE: Doom Emacs configuration
#+AUTHOR: Laurent Lejeune
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../org/styles/org.css"/>

* Introduction

This uses the [[https://github.com/doomemacs/doomemacs][doom-emacs]] configuration framework which provides sane defaults,
hence this personal config file is pretty minimal in itself.

* General Bindings

#+begin_src emacs-lisp :tangle yes
(map! :leader
    :desc "Kill buffer" "x" #'kill-current-buffer
    :desc "Switch buffer (Persp.)" "." #'persp-switch-to-buffer
    :desc "Switch buffer" ">" #'switch-to-buffer
    :desc "Expand region" "e" #'er/expand-region
    :desc "Increase font size" "+" #'doom/increase-font-size
    :desc "Decrease font size" "-" #'doom/decrease-font-size
    :desc "Next buffer" "k" #'next-buffer
    :desc "Previous buffer" "j" #'previous-buffer
    :desc "Search buffer" "/" #'+default/search-buffer
    :desc "Search buffer" "ps" #'+default/search-project
    :desc "Switch window" "TAB" #'ace-window
    :desc "Open URL" "gx" #'browse-url-at-point)
#+end_src

#+begin_src emacs-lisp :tangle yes
(define-key evil-normal-state-map (kbd "H") 'centaur-tabs-backward)
(define-key evil-normal-state-map (kbd "L") 'centaur-tabs-forward)
#+end_src

Evil-mode does not conform precisely to vim's standard keybinding.
We reset these here:
#+begin_src emacs-lisp :tangle yes
(define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
(define-key evil-normal-state-map (kbd "C-x") 'evil-numbers/dec-at-pt)
#+end_src

Function that allow to move around selections:
#+begin_src emacs-lisp :tangle yes
(define-key evil-visual-state-map (kbd "K") 'drag-stuff-up)
(define-key evil-visual-state-map (kbd "J") 'drag-stuff-down)
#+end_src

* Appearance
Colors and fonts
#+begin_src emacs-lisp :tangle yes
;; `gruvbox-material' contrast and palette options
;; (setq doom-gruvbox-material-background  "medium"  ; or hard (defaults to soft)
;;      doom-gruvbox-material-palette     "original") ; or original (defaults to material)

;; set `doom-theme'
(setq doom-theme 'doom-gruvbox-material) ; dark variant

(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 20 :height 1.0 :weight 'normal))
(setq truncate-lines 'nil)
#+end_src

Indentation guides
#+begin_src emacs-lisp :tangle yes
(setq highlight-indent-guides-auto-odd-face-perc 50)
(setq highlight-indent-guides-auto-even-face-perc 50)
(setq highlight-indent-guides-auto-character-face-perc 50)
;; (setq highlight-indent-guides-method 'character)
(setq highlight-indent-guides-responsive 'top)

(setq display-line-numbers-type 'relative)
#+end_src

Patch theme to use different font sizes in org headings.

#+begin_src emacs-lisp :tangle yes
(custom-theme-set-faces!
    'doom-dracula
        '(org-level-4 :inherit outline-4 :height 1.0)
        '(org-level-3 :inherit outline-3 :height 1.1)
        '(org-level-2 :inherit outline-2 :height 1.3)
        '(org-level-1 :inherit outline-1 :height 1.5)
        '(org-document-title :height 1.5 :underline nil))
#+end_src

Hide emphasis markups mark.
#+begin_src emacs-lisp :tangle yes
(setq org-hide-emphasis-markers t)
#+end_src

Show emphasis marker when cursor is on region.

#+begin_src emacs-lisp :tangle yes
(use-package! org-appear
  :defer t
  :config
  (setq org-appear-autolinks t))
(add-hook! org-mode :append #'org-appear-mode)
#+end_src

Force company to use fixed-pitch font
#+begin_src emacs-lisp :tangle yes
(use-package! company
  :defer t
  :custom-face
  (company-tooltip
   ((t (:family "JetBrainsMono Nerd Font" :height 1.0))))
  :config
        (define-key evil-insert-state-map (kbd "C-l") 'company-complete)
        (setq company-idle-delay 0.1)
        (setq company-tooltip-idle-delay 0.1)
        (add-to-list '+lsp-company-backends 'company-files)
        (set-company-backend! 'org-mode 'company-files 'company-capf)
)
#+end_src


* LaTeX
Bind main AucTex menu:

#+begin_src emacs-lisp :tangle yes
(map! :localleader
      :map LaTeX-mode-map
      :desc "Master"    "m" 'TeX-command-master)
#+end_src

Setup default compilation engine.

- The first element of the list is the symbol that AucTeX recognizes.
- The second element is a string with the name of the TeX distribution.
- The third element is the shell command for compiling plain TeX documents.
- The fourth element is the shell command for compiling LaTeX documents.
   Here we are assuming the user is using a Tectonic project (generated using ~tectonic -X new <proj-name>~).
- The last element is the shell command for compiling ConTeXt documents, left unconfigured for now.

#+begin_src emacs-lisp :tangle yes
(setq TeX-engine-alist '((default
                          "Tectonic"
                          "tectonic -X compile -f plain %T"
                          "tectonic -X watch"
                          nil)))
#+end_src

Next, modify the ~LaTeX-command-style~ so that AucTex doesn’t add extra options to it that Tectonic does not recognize.
We simply set it to the ~%(latex)~ expansion (from ~TeX-expand-list-builtin~), removing any other extra options.

#+begin_src emacs-lisp :tangle yes
(setq LaTeX-command-style '(("" "%(latex)")))
#+end_src

We need to set the ~TeX-check-TeX~ variable to ~nil~ since AucTeX will try to find a traditional distribution like ~TeXLive~ or others, and will fail since Tectonic doesn’t meet its criteria.

Additionally, we should also set ~TeX-process-asynchronous~ to ~t~, so that running Tectonic in watch mode doesn’t hang up Emacs.

We’ll also just ensure that the ~TeX-engine~ is set to ~default~.

#+begin_src emacs-lisp :tangle yes
(setq TeX-process-asynchronous t
      TeX-check-TeX nil
      TeX-engine 'default)
#+end_src

Finally, modify the ~TeX-command-list~ to use the appropriate commands and not pass in extra metadata and options to Tectonic that cause it to error out. This needs to be done in place.

#+begin_src emacs-lisp :tangle yes
(add-hook! LaTeX-mode
(let ((tex-list (assoc "TeX" TeX-command-list))
      (latex-list (assoc "LaTeX" TeX-command-list)))
  (setf (cadr tex-list) "%(tex)"
        (cadr latex-list) "%l")))
#+end_src

* Typopunct

#+begin_src emacs-lisp :tangle yes
(use-package! typopunct
  :defer t
  :config
  (typopunct-change-language 'french t))
  #+end_src

* Languagetool
Download standalone [[https://languagetool.org/][LanguageTool]] server from https://languagetool.org/download/LanguageTool-stable.zip and unzip, then set these variables:

#+begin_src emacs-lisp :tangle yes
(setq langtool-language-tool-jar (concat (getenv "HOME") "/bin/LanguageTool-5.2/languagetool-commandline.jar"))

(defun langtool-autoshow-detail-popup (overlays)
  (when (require 'popup nil t)
    ;; Do not interrupt current popup
    (unless (or popup-instances
                ;; suppress popup after type `C-g` .
                (memq last-command '(keyboard-quit)))
      (let ((msg (langtool-details-error-message overlays)))
        (popup-tip msg)))))
(setq langtool-autoshow-message-function
      'langtool-autoshow-detail-popup)

#+end_src

* YAML
#+begin_src emacs-lisp :tangle yes
(use-package! yaml-mode
  :defer t
  :mode ("\\.ya?ml\\'" . yaml-mode))
#+end_src

* Python
** Interpreter
#+begin_src emacs-lisp :tangle yes
(setq python-shell-interpreter "ipython"
    python-shell-interpreter-args "-i --simple-prompt")
#+end_src
** Executables
#+begin_src emacs-lisp :tangle yes
(add-hook 'python-mode-hook #'(lambda () (setq flycheck-checker 'python-pylint)))
#+end_src

** Breakpoints

Bindings and functions to add and highlight breakpoints.
#+begin_src emacs-lisp :tangle yes
(defvar python--pdb-breakpoint-string "breakpoint()")
(defun python-add-breakpoint ()
"Inserts a python breakpoint using `pdb'"
    (interactive)
    (back-to-indentation)
    ;; this preserves the correct indentation in case the line above
    ;; point is a nested block
    (split-line)
    (insert python--pdb-breakpoint-string)
    (python-set-debug-highlight))


(defun python-set-debug-highlight ()
    (interactive)
    (highlight-lines-matching-regexp "breakpoint[.]?" 'hi-red-b))

(defun python-add-debug-highlight ()
    "Adds a highlighter for use by `python--pdb-breakpoint-string'"
    (interactive)
    (python-set-debug-highlight))
    (add-hook 'python-mode-hook 'python-add-debug-highlight)

(map! :localleader
      :map python-mode-map
      :desc "Insert breakpoint"    "d" 'python-add-breakpoint)
#+end_src

** Docstrings

Generate numpy-style docstring automatically from function definition
with [[https://github.com/douglasdavis/numpydoc.el][numpydoc.el]].

#+begin_src emacs-lisp :tangle yes
(use-package! numpydoc
  :defer t
  :init
  (setq numpydoc-insertion-style 'yas))

(map! :localleader
      :map python-mode-map
      :desc "Auto docstring"  "s" 'numpydoc-generate)
#+end_src

Enable pyright and ruff LSP servers for python-mode

#+begin_src emacs-lisp :tangle yes
(after! lsp-mode
  ;; Ensure python-mode uses lsp
  (add-hook 'python-mode-hook #'lsp)

  ;; Prevent doom from disabling one or the other
  (setq lsp-disabled-clients '())

  ;; Register ruff-lsp as an additional client
  (lsp-register-client
   (make-lsp-client
    :new-connection (lsp-stdio-connection '("ruff lsp"))
    :major-modes '(python-mode)
    :server-id 'ruff-lsp
    :add-on? t))) ;; <-- important! allows both Pyright + Ruff

#+end_src

Format using ruff before save
#+begin_src emacs-lisp :tangle yes
;; (after! python
;;   (setq +format-with-lsp nil) ;; disable LSP formatting if any
;;   (add-hook 'before-save-hook
;;             (lambda ()
;;               (when (eq major-mode 'python-mode)
;;                 (call-process "ruff" nil nil nil "format" (buffer-file-name)))
;;               nil)))
#+end_src

* Docker
Disable format-on-save in docker-mode.
This is acting funny when dealing with ~FROM~ instructions.
#+begin_src emacs-lisp :tangle yes
(setq +format-on-save-disabled-modes (add-to-list '+format-on-save-disabled-modes 'dockerfile-mode))
#+end_src
* Golang
#+begin_src emacs-lisp :tangle yes
(setq lsp-go-use-gofumpt t)
#+end_src
* Harpoon
#+begin_src emacs-lisp :tangle yes
(map! :leader
      (:prefix-map ("r" . "Harpoon")
       (:desc "Menu" "m" #'harpoon-quick-menu-hydra
        :desc "Add file" "a" #'harpoon-add-file
        :desc "Edit file" "r" #'harpoon-toggle-file
        :desc "Clear" "c" 'harpoon-clear)))

(map! :leader "1" 'harpoon-go-to-1)
(map! :leader "2" 'harpoon-go-to-2)
(map! :leader "3" 'harpoon-go-to-3)
(map! :leader "4" 'harpoon-go-to-4)
(map! :leader "5" 'harpoon-go-to-5)
(map! :leader "6" 'harpoon-go-to-6)
(map! :leader "7" 'harpoon-go-to-7)
(map! :leader "8" 'harpoon-go-to-8)
(map! :leader "9" 'harpoon-go-to-9)
(map! :leader "0" 'harpoon-go-to-10)
#+end_src
* Org

#+begin_src emacs-lisp :tangle yes
(setq org-export-use-babel t)
(setq org-directory "~/org/")
(load-library "ox-reveal")
(setq org-latex-pdf-process '("tectonic %f"))
(setq org-export-in-background t)
#+end_src

Set PDF viewer.
#+begin_src emacs-lisp :tangle yes
(add-to-list 'org-file-apps '("\\.pdf\\'" . "zathura %s"))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+end_src

** Backends/Exporters

A couple custom LaTeX classes.

#+begin_src emacs-lisp :tangle yes
(after! ox-latex
    (add-to-list 'org-latex-classes
                '("koma-article" "\\documentclass{scrartcl}"
                ("\\section{%s}" . "\\section*{%s}")
                ("\\subsection{%s}" . "\\subsection*{%s}")
                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                ("\\paragraph{%s}" . "\\paragraph*{%s}")
                ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes
                '("koma-article-fr" "\\documentclass[french]{scrartcl}"
                ("\\section{%s}" . "\\section*{%s}")
                ("\\subsection{%s}" . "\\subsection*{%s}")
                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                ("\\paragraph{%s}" . "\\paragraph*{%s}")
                ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes
                '("memoir-fr"
                "\\documentclass[a4paper,11pt,titlepage, twoside]{memoir}
                    \\usepackage[utf8]{inputenc}
                    \\usepackage[T1]{fontenc}
                    \\usepackage{fixltx2e}
                    \\usepackage{hyperref}
                    \\usepackage{mathpazo}
                    \\usepackage{color}
                    \\usepackage{enumerate}
                    \\definecolor{bg}{rgb}{0.95,0.95,0.95}
                    \\tolerance=1000
                    \\linespread{1.1}
                    \\hypersetup{pdfborder=0 0 0}"
                ("\\chapter{%s}" . "\\chapter*{%s}")
                ("\\section{%s}" . "\\section*{%s}")
                ("\\subsection{%s}" . "\\subsection*{%s}")
                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                ("\\paragraph{%s}" . "\\paragraph*{%s}")
                ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes
                '("TMI"
                "\\documentclass[journal, web, twoside]{ieeecolor}"
                ("\\section{%s}" . "\\section*{%s}")
                ("\\subsection{%s}" . "\\subsection*{%s}")
                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                ("\\paragraph{%s}" . "\\paragraph*{%s}")
                ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

)
#+end_src


Detect french-style quotes when exporting

#+begin_src emacs-lisp :tangle no
(after! ox
    (setq fr-quotes '("fr"
                    (primary-opening :utf-8 "« " :html "&laquo;&nbsp;" :latex "\\enquote{" :texinfo "@guillemetleft{}@tie{}")
                    (primary-closing :utf-8 " »" :html "&nbsp;&raquo;" :latex "}" :texinfo "@tie{}@guillemetright{}")
                    (secondary-opening :utf-8 "« " :html "&laquo;&nbsp;" :latex "\\\enquote{" :texinfo "@guillemetleft{}@tie{}")
                    (secondary-closing :utf-8 " »" :html "&nbsp;&raquo;" :latex "\\}" :texinfo "@tie{}@guillemetright{}")
                    (apostrophe :utf-8 "’" :html "&rsquo;")))
    (add-to-list 'org-export-smart-quotes-alist fr-quotes))
#+end_src

Exporter for the [[https://github.com/posquit0/Awesome-CV][awesome-cv]] latex class.
#+begin_src emacs-lisp :tangle yes
(use-package! ox-awesomecv
  :after org)
#+end_src

When exporting to HTML, force code block background to use current theme color, otherwise,
things may end up not readable when using dark themes.

#+begin_src emacs-lisp :tangle yes
(defun my/org-inline-css-hook (exporter)
  "Insert custom inline css to automatically set the
background of code to whatever theme I'm using's background"
  (when (eq exporter 'html)
    (let* ((my-pre-bg (face-background 'default))
           (my-pre-fg (face-foreground 'default)))
      (setq
       org-html-head-extra
       (concat
        org-html-head-extra
        (format "<style type=\"text/css\">\n pre.src {background-color: %s; color: %s;}</style>\n"
                my-pre-bg my-pre-fg))))))

(add-hook 'org-export-before-processing-hook 'my/org-inline-css-hook)
#+end_src

** Org-ref / bibtex
- We define in ~org-ref-default-bibliography~ a default ~bib~ file.
- We use [[https://tectonic-typesetting.github.io/en-US/][tectonic]] to generate ~pdf~ files from LaTeX.
- When adding citations in popup buffer, finish by using *M-Enter*.

#+begin_src emacs-lisp :tangle yes
(use-package! org-ref
  :defer t
    :init
        (setq org-ref-bibliography-notes "~/org/paper-notes/paper-notes.org"
            org-ref-default-bibliography "~/org/refs.bib"
            bibtex-completion-bibliography org-ref-default-bibliography
            bibtex-completion-notes-path "~/org/paper-notes/paper-notes.org"
            bibtex-completion-pdf-open-function
                (lambda (fpath)
                (call-process "zathura" nil 0 nil fpath))))

(map! :localleader
      :map org-mode-map
      :desc "Insert citation" "c" 'org-cite-insert)
#+end_src

** Org-capture
#+begin_src emacs-lisp :tangle yes
(setq org-capture-templates
  (quote
   (("t" "todo" entry
     (file+headline "~/org/todo.org" "Tasks")
     "* TODO %U %?\n\n"
     :empty-lines-after 1)
    ("n" "note" entry
     (file+headline "~/org/notes.org" "Inbox")
     "* %U %? \n\n"
     :empty-lines-after 1))))
#+end_src


* Others

#+begin_src emacs-lisp :tangle yes
(after! counsel
  (setq counsel-rg-base-command "rg -M 240 --with-filename --no-heading --line-number --color never %s || true"))
#+end_src

#+begin_src emacs-lisp :tangle yes
(after! iflipb
  (setq iflipb-ignore-buffers "$^")
  )
#+end_src

Enable tree-sitter syntax highlighting for all languages.

#+begin_src emacs-lisp :tangle yes
(setq +tree-sitter-hl-enabled-modes t)
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq confirm-kill-emacs nil)
#+end_src

* TMUX

#+begin_src emacs-lisp :tangle yes
(defun tmux-sessionizer ()
  (interactive)
  (with-current-buffer
      (shell-command "tmux neww tmux-sessionizer")))
(map! :nvi "C-f" #'tmux-sessionizer)
#+end_src

* Notmuch

** Cheatsheet

*** Autocomplete addresses
By default, notmuch uses ~notmuch address~ to fetch all email addresses parsed until now.
Use ~<TAB>~ when writing an address in the "To" field to auto-complete.

*** Forwarding
Open email you want to forward and press ~c f~.

** Saved Searches

#+begin_src emacs-lisp :tangle yes
(setq ll/notmuch-default-query "tag:inbox AND not tag:deleted AND date:3months..")
(setq notmuch-saved-searches
    `((:name "inbox"
       :query ,ll/notmuch-default-query
       :key "i"
       :search-type: tree)
      (:name "sent"
       :query "tag:sent AND not tag:deleted")
      (:name "gmail"
       :query "tag:Gmail/Inbox AND not tag:deleted"
       :key "g"
       :search-type: tree)
      (:name "personal"
       :query "tag:Gandi/Inbox AND not tag:deleted"
       :key "p"
       :search-type tree)))
(setq +notmuch-mail-folder "~/.mail")
(setq +notmuch-sync-backend 'mbsync)
(setq +notmuch-home-function (lambda () (notmuch-search ll/notmuch-default-query)))
#+end_src

** My Identity

#+begin_src emacs-lisp :tangle yes
(setq notmuch-always-prompt-for-sender t)
(setq user-full-name "Laurent Lejeune")
(setq user-mail-address "me@lejeunel.org")
(setq mail-host-address "lejeunel.org")
#+end_src

** External Viewer
Use xdg-open to open attachments.
#+begin_src emacs-lisp :tangle yes
(after! notmuch
  (setq notmuch-show-part-action-list
        '(("Open with xdg-open" . (lambda (part) (start-process "xdg-open" nil "xdg-open" (notmuch-show-get-filename part))))
          ("View" . notmuch-show-view-part)
          ("Save" . notmuch-show-save-part))))
#+end_src

** MSMTP

If msmtp is passed the envelope address on the command line
it will automatically pick the matching account.
We want that emacs pass the envelope from.
There are overlapping configuration variables that control this,
and it's a little confusing, but setting these three works for me:

#+begin_src emacs-lisp :tangle yes
(setq mail-specify-envelope-from t)
(setq message-sendmail-envelope-from 'header)
(setq mail-envelope-from 'header)
#+end_src

** Forwarding

This sets default "forward-to" subject. We simply preprend "Fwd: " to
the original subject.

#+begin_src emacs-lisp :tangle yes
(setq message-make-forward-subject-function 'message-forward-subject-fwd)
#+end_src

** Avoid Empty Subjects

This asks for a confirmation when sending an email with an empty subject.

#+begin_src emacs-lisp :tangle yes
(defun my-notmuch-mua-empty-subject-check ()
  "Request confirmation before sending a message with empty subject"
  (when (and (null (message-field-value "Subject"))
             (not (y-or-n-p "Subject is empty, send anyway? ")))
    (error "Sending message cancelled: empty subject.")))
(add-hook 'message-send-hook 'my-notmuch-mua-empty-subject-check)
#+end_src
